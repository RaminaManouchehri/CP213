SingleLink Data Structures Tests

Tests are of the form:
  Test Operation {expected value}: actual value
  Contents: [contents from front to rear]

================================================================================
Testing SingleStack
----------------------------------------
SingleStack<Integer> source = new SingleStack<>();
  isEmpty {true}: true
----------------------------------------
Push values: [14, 48, 33, 44, 30, 1, 48]
  push: 14
  push: 48
  push: 33
  push: 44
  push: 30
  push: 1
  push: 48
  isEmpty {false}: false
  peek {48}: 48
  Contents: [48, 1, 30, 44, 33, 48, 14]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {14}: 14
  Contents: [14, 33, 30, 48]
right
  isEmpty {false}: false
  peek {48}: 48
  Contents: [48, 44, 1]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {48}: 48
  Contents: [48, 1, 30, 44, 33, 48, 14]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  Pop {48}: 48
  Pop {1}: 1
  Pop {30}: 30
  Pop {44}: 44
  Pop {33}: 33
  Pop {48}: 48
  Pop {14}: 14

----------------------------------------
Test Stack with strings
test
string
123
abc
xyz
================================================================================
Testing SingleQueue
----------------------------------------
SingleQueue<Integer> source = new SingleQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [27, 0, 47, 28, 35, 12, 20]
  insert: 27
  insert: 0
  insert: 47
  insert: 28
  insert: 35
  insert: 12
  insert: 20
  isEmpty {false}: false
  peek {27}: 27
  Contents: [27, 0, 47, 28, 35, 12, 20]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {27}: 27
  Contents: [27, 47, 35, 20]
right
  isEmpty {false}: false
  peek {0}: 0
  Contents: [0, 28, 12]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {27}: 27
  Contents: [27, 0, 47, 28, 35, 12, 20]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  remove {27}: 27
  remove {0}: 0
  remove {47}: 47
  remove {28}: 28
  remove {35}: 35
  remove {12}: 12
  remove {20}: 20

----------------------------------------
Test Queue with strings
xyz
abc
123
string
test
================================================================================
Testing SinglePriorityQueue
----------------------------------------
SinglePriorityQueue<Integer> source = new SinglePriorityQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [15, 9, 12, 46, 30, 28, 11]
  insert: 15
  insert: 9
  insert: 12
  insert: 46
  insert: 30
  insert: 28
  insert: 11
  isEmpty {false}: false
  peek {9}: 9
  Contents: [9, 11, 12, 15, 28, 30, 46]
----------------------------------------
source.splitByKey(15, left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {9}: 9
  Contents: [9, 11, 12]
right
  isEmpty {false}: false
  peek {15}: 15
  Contents: [15, 28, 30, 46]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {9}: 9
  Contents: [9, 11, 12, 15, 28, 30, 46]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  remove {9}: 9
  remove {11}: 11
  remove {12}: 12
  remove {15}: 15
  remove {28}: 28
  remove {30}: 30
  remove {46}: 46

----------------------------------------
Test Priority Queue with strings
123
abc
string
test
xyz
================================================================================
Testing SingleList
----------------------------------------
SingleList<Integer> source = new SingleList<>();
  isEmpty {true}: true
----------------------------------------
Append values: [41, 32]
  append: 41
  append: 32
  isEmpty {false}: false
  peek {41}: 41
  Contents: [41, 32]
----------------------------------------
prepend: 33
  isEmpty {false}: false
  peek {33}: 33
  Contents: [33, 41, 32]
----------------------------------------
Insert values: [41, 32]
  insert: (1, 48)
  insert: (2, 15)
  insert: (3, 24)
  insert: (4, 5)
  isEmpty {false}: false
  peek {33}: 33
  Contents: [33, 48, 15, 24, 5, 41, 32]
----------------------------------------
contains 999 {false}: false
contains 24 {true}: true
----------------------------------------
find 999 {null}: 
find 24 {24}: 24
----------------------------------------
get 3 {24}: 24
----------------------------------------
index 24 {3}: 3
index 999 {-1}: -1
----------------------------------------
max {48}: 48
min {5}: 5
----------------------------------------
Contents: [33, 48, 15, 24, 5, 41, 32]
  count 999 {0}: 0
Contents: [75, 75, 75, 75, 75, 75, 75]
  count 75 {7}: 7
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  clean {[75]}: [75]
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  removeMany 999 {[75, 75, 75, 75, 75, 75, 75]}: [75, 75, 75, 75, 75, 75, 75]
  removeMany 75 {[]}: []
----------------------------------------
Contents: [33, 48, 15, 24, 5, 41, 32]
  removeFront {33}: 33
----------------------------------------
Contents: [48, 15, 24, 5, 41, 32]
  remove 999 {null}: null
  remove 32 {32}: 32
Contents: [48, 15, 24, 5, 41]
----------------------------------------
Contents: [33, 48, 15, 24, 5, 41, 32]
  reverse {[32, 41, 5, 24, 15, 48, 33]}: [32, 41, 5, 24, 15, 48, 33]
----------------------------------------
Contents: [33, 48, 15, 24, 5, 41, 32]
  split {[33, 48, 15, 24], [5, 41, 32]}: [33, 48, 15, 24], [5, 41, 32]
----------------------------------------
Contents: [33, 48, 15, 24, 5, 41, 32]
  splitAlternate {[33, 15, 5, 32], [48, 24, 41]}: [33, 15, 5, 32], [48, 24, 41]
----------------------------------------
Contents: [33, 15, 5, 32], [48, 24, 41]
  combine {[33, 48, 15, 24, 5, 41, 32]}: [33, 48, 15, 24, 5, 41, 32]
----------------------------------------
Contents: [], []
  identical {true}: true
Contents: [33, 48, 15, 24, 5, 41, 32], [33, 48, 15, 24, 5, 41, 32]
  identical {true}: true
Contents: [33, 48, 15, 24, 5, 41, 32], [5, 15, 24, 32, 33, 41, 48]
  identical {false}: false
----------------------------------------
Contents: [2, 3, 0, 6, 5, 1, 4], [6, 2, 3, 0, 1, 4, 5]
  intersection {[2, 3, 0, 6, 5, 1, 4]}: [2, 3, 0, 6, 5, 1, 4]
Contents: [2, 3, 0, 6, 5, 1, 4], [999]
  intersection {[]}: []
----------------------------------------
Contents: [2, 3, 0], [6, 5, 1, 4]
  union {[2, 3, 0, 6, 5, 1, 4]}: [2, 3, 0, 6, 5, 1, 4]
----------------------------------------
SingleList<Character> characters = new SingleList<>();
  append: CP213
  append: David
  append: Laurier
  append: covid
  Contents: [CP213, David, Laurier, covid]

----------------------------------------
Test List with strings
xyz
abc
123
string
test
